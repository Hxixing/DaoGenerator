package com.example.daotest;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SIM_BEAN".
*/
public class SimBeanDao extends AbstractDao<SimBean, Integer> {

    public static final String TABLENAME = "SIM_BEAN";

    /**
     * Properties of entity SimBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Pid = new Property(0, Integer.class, "pid", true, "PID");
        public final static Property MId = new Property(1, Long.class, "mId", false, "M_ID");
        public final static Property MTracffic = new Property(2, Double.class, "mTracffic", false, "M_TRACFFIC");
    }


    public SimBeanDao(DaoConfig config) {
        super(config);
    }
    
    public SimBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SIM_BEAN\" (" + //
                "\"PID\" INTEGER PRIMARY KEY ," + // 0: pid
                "\"M_ID\" INTEGER," + // 1: mId
                "\"M_TRACFFIC\" REAL);"); // 2: mTracffic
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SIM_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SimBean entity) {
        stmt.clearBindings();
 
        Integer pid = entity.getPid();
        if (pid != null) {
            stmt.bindLong(1, pid);
        }
 
        Long mId = entity.getMId();
        if (mId != null) {
            stmt.bindLong(2, mId);
        }
 
        Double mTracffic = entity.getMTracffic();
        if (mTracffic != null) {
            stmt.bindDouble(3, mTracffic);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SimBean entity) {
        stmt.clearBindings();
 
        Integer pid = entity.getPid();
        if (pid != null) {
            stmt.bindLong(1, pid);
        }
 
        Long mId = entity.getMId();
        if (mId != null) {
            stmt.bindLong(2, mId);
        }
 
        Double mTracffic = entity.getMTracffic();
        if (mTracffic != null) {
            stmt.bindDouble(3, mTracffic);
        }
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0);
    }    

    @Override
    public SimBean readEntity(Cursor cursor, int offset) {
        SimBean entity = new SimBean( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // pid
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // mId
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2) // mTracffic
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SimBean entity, int offset) {
        entity.setPid(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setMId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setMTracffic(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
     }
    
    @Override
    protected final Integer updateKeyAfterInsert(SimBean entity, long rowId) {
        return entity.getPid();
    }
    
    @Override
    public Integer getKey(SimBean entity) {
        if(entity != null) {
            return entity.getPid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SimBean entity) {
        return entity.getPid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
